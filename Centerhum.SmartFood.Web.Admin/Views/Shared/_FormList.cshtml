@model Centerhum.SmartFood.HtmlObjects.FormList
@{ 
    string formAjax = Model.Parameters.IsAjax ? "form-list-ajax" : "";
    string validateForm = !Model.Parameters.CustomValidate ? "validate-me" : "";
}
<div class="row" id="form-list">
    <div class="col-md-12">
        <div class="widget box">
            <div class="widget-header">
                <h4 id="header-filter">
                    <i class="icon-reorder"></i>@Model.Parameters.Title</h4>
                <div class="toolbar no-padding" style="display: none;">
                    <div class="btn-group">
                        <span class="btn btn-xs widget-collapse" id="btn-widget-collapse-filter"><i class="icon-angle-down"></i></span>
                    </div>
                </div>
            </div>
            <div class="widget-content">
                <form id="@Model.Parameters.FormId" class="form-horizontal row-border @validateForm @formAjax" action="@Model.Parameters.UrlAction">
                    <div class="form-body">
                        @if (Model.Parameters.Fields != null && Model.Parameters.Fields.Any(x => x.Type != Centerhum.SmartFood.HtmlObjects.Enum.FieldType.Hidden))
                        {
                            foreach (var field in Model.Parameters.Fields.Where(x => x.Type != Centerhum.SmartFood.HtmlObjects.Enum.FieldType.Hidden).ToList())
                            {
                            <div class="form-group">
                                <label class="control-label col-md-3">
                                    @field.Label
                                    @{ 
                                string requiredClass = "";
                                string appendClass = (!string.IsNullOrWhiteSpace(field.AppendClass) ? field.AppendClass : string.Empty);
                                    }
                                    @if (field.IsRequired)
                                    {
                                        requiredClass = "required";
                                        <span class="required">*</span>
                                    }
                                </label>
                                <div class="col-md-6">
                                    @switch (field.Type)
                                    {
                                        case Centerhum.SmartFood.HtmlObjects.Enum.FieldType.TextBox:
                                        <input type="text" class="form-control @appendClass @requiredClass" name="@field.Name" value="@field.Value" id="@field.Name" placeholder="@field.Placeholder" />
                                            break;
                                        case Centerhum.SmartFood.HtmlObjects.Enum.FieldType.Email:
                                        <input type="text" class="form-control email @appendClass @requiredClass" value="@field.Value" name="@field.Name" id="@field.Name" placeholder="@field.Placeholder" />
                                            break;
                                        case Centerhum.SmartFood.HtmlObjects.Enum.FieldType.Datepicker:
                                        <input type="text" class="form-control date-picker @appendClass @requiredClass" value="@field.Value" name="@field.Name" id="@field.Name" placeholder="@field.Placeholder" />
                                            break;
                                        case Centerhum.SmartFood.HtmlObjects.Enum.FieldType.TextTag:
                                            string tagsValues = "";
                                            field.InitialsTags.ForEach(x => tagsValues += (x + ","));
                                        <input type="text" class="form-control tag @appendClass @requiredClass" name="@field.Name" id="@field.Name" placeholder="@field.Placeholder" value="@tagsValues">
                                            break;
                                        case Centerhum.SmartFood.HtmlObjects.Enum.FieldType.Spinner:
                                        <input type="text" class="form-control spinner @appendClass @requiredClass" value="@field.Value" name="@field.Name" id="@field.Name" placeholder="@field.Placeholder">
                                            break;
                                        case Centerhum.SmartFood.HtmlObjects.Enum.FieldType.Select:
                                        <select name="@field.Name" id="@field.Name" data-placeholder="@field.Placeholder" class="col-md-12 form-control @appendClass @requiredClass">
                                            @if (field.SelectListItems != null && field.SelectListItems.Count() > 0)
                                            {
                                                if (!string.IsNullOrWhiteSpace(field.Placeholder))
                                                {
                                                    <option value="" disabled="disabled" selected="selected">@field.Placeholder</option>
                                                }

                                                foreach (var option in field.SelectListItems)
                                                {
                                                    if (option.Selected || (field.Value == option.Value))
                                                    { <option value="@option.Value" selected>@option.Text</option> }
                                                    else
                                                    { <option value="@option.Value">@option.Text</option>  }
                                                }
                                            }
                                        </select>
                                            if (!string.IsNullOrWhiteSpace(field.HelpText))
                                            { <span class="help-block">@field.HelpText</span> }
                                            break;
                                        case Centerhum.SmartFood.HtmlObjects.Enum.FieldType.RadioButton:
                                            if (field.RadioButtonItems != null && field.RadioButtonItems.Count() > 0)
                                            {
                                                foreach (var radio in field.RadioButtonItems)
                                                {
                                        <label class="radio">
                                            <input type="radio" name="@field.Name" id="@field.Name" value="@radio.Value" class="uniform">
                                            @radio.Label
                                        </label>
                                                }
                                            }
                                            break;
                                        case Centerhum.SmartFood.HtmlObjects.Enum.FieldType.CheckedBox:
                                            if (field.CheckedBoxItems != null && field.CheckedBoxItems.Count() > 0)
                                            {
                                                foreach (var cb in field.CheckedBoxItems)
                                                {
                                        <label class="checkbox">
                                            <div class="checker">
                                                <input type="checkbox" name="@cb.Name" id="@cb.Name" value="true" class="uniform">
                                            </div>
                                            @cb.Label
                                        </label>
                                                }
                                            }
                                            break;
                                        default:
                                        <input type="text" class="form-control @appendClass @requiredClass" value="@field.Value" name="@field.Name" id="@field.Name" placeholder="@field.Placeholder" />
                                            if (!string.IsNullOrWhiteSpace(field.HelpText))
                                            { <span class="help-block">@field.HelpText</span> }
                                            break;
                                    }
                                    @if (field.Type != Centerhum.SmartFood.HtmlObjects.Enum.FieldType.CheckedBox && field.Type != Centerhum.SmartFood.HtmlObjects.Enum.FieldType.RadioButton)
                                    {
                                        if (!string.IsNullOrWhiteSpace(field.HelpText))
                                        { <span class="help-block">@field.HelpText</span> }
                                    }
                                </div>
                            </div>
                            }
                        }
                        @if (Model.Parameters.Fields.Any(x => x.Type == Centerhum.SmartFood.HtmlObjects.Enum.FieldType.Hidden))
                        {
                            foreach (var field in Model.Parameters.Fields.Where(x => x.Type == Centerhum.SmartFood.HtmlObjects.Enum.FieldType.Hidden).ToList())
                            {
                                <input type="hidden" value="@field.Value" class="@field.AppendClass" name="@field.Name" id="@field.Name" />
                            }
                        }
                    </div>
                    <div class="form-actions fluid">
                        <div class="row">
                            <div class="col-md-offset-7 col-md-5">
                                <div class="row">
                                    <div class="col-md-3 col-md-offset-6">
                                        <input type="reset" class="btn btn-block button-reset" value="Limpar">
                                    </div>
                                    <div class="col-md-3">
                                        <button type="submit" class="btn btn-primary btn-block button-next" value="Pesquisar">
                                            Pesquisar&nbsp;
                                            <i class="icon-search"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="row" id="grid">
    @*Render grid !!!*@
</div>
<!-- Up grid row -->
